    LJMP START
    ORG 100H

START:
    LCALL LCD_INIT
    LCALL LCD_CLR

    LCALL WAIT_KEY ;we storage a value in A by text input
    MOV R0,A  ;R0 has the first operand ------------------------------- R0 FIRST OPERAND

    LCALL BCD
    LCALL WRITE_HEX ;print the first operand R0

    LCALL WAIT_KEY ;waiting for operation to perform

PLUS:
    CJNE A, #10, MINUS  ;continue in this function if we selected the left arrow
    MOV A,#'+'
    LCALL WRITE_DATA  ;print '+' operand

    LCALL GET_2ND_OPERAND

    MOV A,R0 ;loading to acc the first operand because acc was overwritten
    ADD A,R1 ;PLUS OPERATION
    MOV R2,A ;we store in r2 the result -------------------------------- R2 RESULT stored

    LCALL PRINT_RESULT

MINUS:
    CJNE A, #11, MULTIPLY ;continue in this function if we selected the right arrow
    MOV A,#'-'
    LCALL WRITE_DATA ;print '-' operand

    LCALL GET_2ND_OPERAND

    CLR C ;clears the carry bit (just in case wasn't zero)

    MOV A,R0 ;loading to acc the first operand because acc was overwritten
    SUBB A,R1 ;MINUS OPERATION (A = A - C - Rn = A - Rn (we set C to zero))
    MOV R2,A ;we store in r2 the result -------------------------------- R2 RESULT stored

    JC CARRY_IN_SUBSTRACTION ;if we have a carry set, we have a negative result, we put minus
CONTINUE_MINUS:
    LCALL PRINT_RESULT

MULTIPLY:
    CJNE A, #12, DIVISION ;continue in this function if we selected the up arrow
    MOV A,#'*'
    LCALL WRITE_DATA ;print '*' operand

    LCALL GET_2ND_OPERAND

    MOV A,R0 ;loading to acc the first operand because acc was overwritten
    MOV B,R1
    MUL AB ;Multiply A and B
    MOV R2,A ;we store in r2 the result -------------------------------- R2 RESULT stored

    LCALL PRINT_RESULT

DIVISION:
    MOV A,#'/'
    LCALL WRITE_DATA ;print '/' operand

    LCALL GET_2ND_OPERAND

    ;check if second operand is a zero. If R1==0 go to SHOW_ERROR, if not CONTINUE_DIVISION
    CJNE R1, #0 , CONTINUE_DIVISION

    LCALL SHOW_ERROR

CONTINUE_DIVISION:
    MOV A,R0
    MOV B,R1
    DIV AB ;A/B
    MOV R2,A ;we store in r2 the result -------------------------------- R2 RESULT stored
    MOV R3,B

    MOV A,R2 ;move the result to the accumulator
    LCALL BCD ;we convert the digit in acumulator for something understandable
    LCALL WRITE_HEX  ;print the acumulator----------------------------SOLUTION

    MOV A,#'R' ;move the result to the accumulator
    LCALL WRITE_DATA ;print the acumulator----------------------------SOLUTION

    MOV A,R3 ;move the result to the accumulator
    LCALL BCD ;we convert the digit in acumulator for something understandable
    LCALL WRITE_HEX  ;print the acumulator----------------------------SOLUTION
    LCALL FINISH_PROGRAMME




; _________________________________________
;             FUNCTIONS USED
; _________________________________________

SHOW_ERROR:
    MOV A,#'E'
    LCALL WRITE_DATA ;print the '-' sign
    MOV A,#2
    LCALL DELAY_100MS
    MOV A,#'R'
    LCALL WRITE_DATA ;print the '-' sign
    MOV A,#2
    LCALL DELAY_100MS
    MOV A,#'R'
    LCALL WRITE_DATA ;print the '-' sign
    MOV A,#2
    LCALL DELAY_100MS
    MOV A,#'O'
    LCALL WRITE_DATA ;print the '-' sign
    MOV A,#2
    LCALL DELAY_100MS
    MOV A,#'R'
    LCALL WRITE_DATA ;print the '-' sign

    LCALL FINISH_PROGRAMME ;if the second operand is zero finish the programme


CARRY_IN_SUBSTRACTION: ;prints a '-' if the result of substraction is < 0
    MOV A,#'-'
    LCALL WRITE_DATA ;print the '-' sign
    CLR C

    MOV A, R2
	  CPL A 	; 1's complement
	  ADD A, #01H 	; 2's complement
	  MOV R2,A

    ;RET DOES NOT WORK IN THIS CASE, ONLY WORKS WHEN THE FUNCION WAS CALLED WITH LCAL
    LCALL CONTINUE_MINUS

GET_2ND_OPERAND:   ;gets the second operand, waits 0,5 sec and prints '='
    LCALL WAIT_KEY ;we storage a value in A by text input
    MOV R1,A ;----------------------------------------------------------------R1 second operand stored

    LCALL BCD
    LCALL WRITE_HEX ;print the second operand R1

    MOV A,#'='
    LCALL WRITE_DATA ;print the '=' sign

    MOV A,#5
    LCALL DELAY_100MS ;wait for 0,5 sec to print result

    RET

PRINT_RESULT:
    MOV A,R2 ;move the result to the accumulator
    LCALL BCD ;we convert the digit in acumulator for something understandable
    LCALL WRITE_HEX  ;print the acumulator----------------------------SOLUTION

    LCALL FINISH_PROGRAMME

BCD:
    MOV B,#100 ;detecting the hundreds
    DIV AB
    JZ BCD2
    LCALL WRITE_HEX
BCD2:
    MOV A,B
    MOV B,#10
    DIV AB
    SWAP A
    ADD A,B

    RET



FINISH_PROGRAMME:
    SJMP $
    NOP
